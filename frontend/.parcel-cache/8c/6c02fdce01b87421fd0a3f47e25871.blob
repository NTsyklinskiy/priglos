function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// let bg = document.querySelector('.container__heart--bg')
// window.addEventListener('scroll', function() {
//   bg.style.backgroundSize = `${100 + value}px`;
//   bg.style.opacity = `-${(100 + value * 2) / (100 + docValue[0].height * 2) - 1}`;
// })
class Component {
  constructor() {
    this.getElementToId();
    this.getBCR();
  }

  getElementToId(id) {
    let element;

    if (id === '') {
      element = window;
    } else {
      element = document.getElementById(id);
    }

    return element;
  }

  getBCR(el, param) {// const element = el.getBoundingClientRect()
    // if(param){
    // }
    // return element
  }

}

class App {
  static init() {
    const navHover = new Listeners('navigation', 'mouseover mouseout', '0.5 1');
    navHover.listenerHeader();
    const navClick = new Listeners('header', 'click');
    navClick.listenerHeader();
    const navScroll = new Listeners('', 'scroll');
    navScroll.listenerHeader();
  }

}

class Listeners extends Component {
  constructor(id, type, arg) {
    super();
    this.id = id;
    this.type = type;
    this.arg = arg;
  }

  navHover(ob, e) {
    // console.log(ob, e)
    if (e.target.classList.contains('navigation__link')) {
      const link = e.target;
      const siblings = link.closest('.navigation__items').querySelectorAll('.navigation__link');
      siblings.forEach(el => {
        if (el !== link) {
          el.style.opacity = ob;
        }
      });
    }
  }

  navClick(ob, e) {
    e.preventDefault();

    if (e.target.classList.contains('navigation__link')) {
      const id = e.target.getAttribute('href');
      document.querySelector(id).scrollIntoView({
        behavior: 'smooth'
      });
    }
  }

  navScroll(ob, e) {
    const value = window.scrollY;
    const docValue = document.getElementById('timer').offsetTop;
    const elHeart = document.querySelector('.priglos > div');
    if (value > docValue) elHeart.className = 'focus';
  }

  listenerHeader() {
    const el = this.getElementToId(this.id);
    this.type.split(' ').forEach(t => {
      if (t === 'mouseover') {
        el.addEventListener(t, this.navHover.bind(null, this.arg.split(' ')[0]));
      } else if (t === 'mouseout') {
        el.addEventListener(t, this.navHover.bind(null, this.arg.split(' ')[1]));
      } else if (t === 'click') {
        el.addEventListener(t, this.navClick.bind(null, this));
      } else if (t === 'scroll') {
        el.addEventListener(t, this.navScroll.bind(null, this));
      }
    });
  }

}

class Timer {
  // static endtime = new Date(2021,06,10,15);
  static startLogOutTimer() {
    // console.log(Date.parse(this.endtime))
    const tick = () => {
      const labelTimer = document.querySelector(this.id),
            labelSec = labelTimer.querySelector('.seconds span '),
            labelMin = labelTimer.querySelector('.minuts span '),
            labelHours = labelTimer.querySelector('.hours span '),
            labelDays = labelTimer.querySelector('.days span '),
            time = Date.parse(this.endtime) - Date.parse(new Date()),
            sec = String(Math.floor(time / 1000 % 60)).padStart(2, 0),
            min = String(Math.floor(time / 1000 / 60 % 60)).padStart(2, 0),
            hours = String(Math.floor(time / (1000 * 60 * 60) % 24)).padStart(2, 0),
            days = String(Math.floor(time / (1000 * 60 * 60 * 24))).padStart(2, 0);
      labelSec.textContent = sec;
      labelMin.textContent = min;
      labelHours.textContent = hours;
      labelDays.textContent = days; // labelTimer.textContent = `${day}:${hours}:${min}:${sec}`;

      if (time === 0) {
        clearInterval(timer);
      }
    };

    tick();
    const timer = setInterval(tick, 1000);
    return timer;
  }

}

_defineProperty(Timer, "id", '#timer');

Timer.startLogOutTimer();
App.init(); // importNode(element, true)   cloneNode(true) replaceWith 
// window.addEventListener('scroll', (e)=> {
//   console.log('Current scroll (X/Y', window.pageYOffset,window.scrollY);
//   // console.log(elHeart)
// })