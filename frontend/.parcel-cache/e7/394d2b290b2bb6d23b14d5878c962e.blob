"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _config = require("./config.js");

var _regeneratorRuntime = require("regenerator-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Controller {
  constructor() {// this.handlerForm()
    // console.log(this);

    _defineProperty(this, "form", document.querySelector('.modal-form'));
  }

  controlLogin(user) {
    try {
      model.signIn(user); // headerView.render(model.state);
      // recipeView.render(model.state.recipe);

      window.history.pushState(null, '', `/#me`);
      setTimeout(function () {
        body.style.overflow = 'hidden'; // modalView.toggleWindow();
      }, 1000);
    } catch (err) {
      // modalView.renderError()
      throw err;
    }
  }

  handlerForm(callback) {
    console.log(this.form);
    this.form.addEventListener('submit', function (e) {
      e.preventDefault();
      console.log(this);
      const dataArr = [...new FormData(this)];
      const data = Object.fromEntries(dataArr); // this.controlLogin(data)

      callback(data);
    });
  }

}

exports.default = Controller;